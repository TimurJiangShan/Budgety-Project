理解原型与原型链
原型编程范式的核心思想就是利用实例来描述对象，用实例作为定义对象和继承的基础。在 JavaScript 中，原型编程范式的体现就是基于原型链的继承。这其中，对原型、原型链的理解是关键。

原型

在 JavaScript 中，每个构造函数都拥有一个 prototype 属性，它指向构造函数的原型对象，
这个原型对象中有一个 construtor 属性指回构造函数；每个实例都有一个__proto__属性，
当我们使用构造函数去创建实例时，实例的__proto__属性就会指向构造函数的原型对象。

用new去创建一个实例时， new做了什么？ 做了四件事

1. 为这个新的对象开辟一块属于它的内存空间
2. 把函数体内的this指到1中开辟的内存空间去
3. 将新对象的 __proto__ 这个属性指向对应构造函数的 prototype 属性，把实例和原型对象关联起来
4. 执行函数体内的逻辑， 最后即使你没有手动return， 构造函数也会帮你把创建的这个新对象return 出来
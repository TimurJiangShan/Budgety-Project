内存的分配与使用

栈内存与堆内存
基本类型和引用类型
JS 中的数据类型，整体上来说只有两类：基本类型和引用类型。

其中基本类型包括：Sting、Number、Boolean、null、undefined、Symbol。这类型的数据最明显的特征是大小固定、体积轻量、相对简单，它们被放在 JS 的栈内存里存储。

而排除掉基本类型，剩下的数据类型就是引用类型，比如 Object、Array、Function 等等等等。这类数据比较复杂、占用空间较大、且大小不定，它们被放在 JS 的堆内存里存储。

其实字符串、symbol、bigint这几个原始值是存在堆里的，而且要注意，es标准没有规定它们要存在哪里，只是v8是这么实现的。
这个我看到的绝大多数文章都是错的，栈存储的数量级不能超过32位，但一个字符串的长度肯定是会超过32位的，chrome的调试里也可以看到字符串等都是存在heap里的

堆和栈分别是不同的数据结构。栈是线性表的一种，而堆则是树形结构。

let a = 0; 
let b = "Hello World" 
let c = null; 
let d = { name: '修言' }; 
let e = ['修言', '小明', 'bear']; 

在访问a，b，c 三个变量的时候， 过程非常简单： 从栈中直接获取改该变量的值
而在访问 d 和 e 时， 则需要分两步走：
  1. 从栈中获取变量对应对象的引用（即它在堆内存中的地址）
  2. 拿着 1 中获取到的地址， 再去堆内存空间查询， 才能拿到我们想要的数据


垃圾回收机制：

标记清除法
考虑到引用计数法存在严重的局限性，自 2012 年起，所有浏览器都使用了标记清除算法。可以说，标记清除法是现代浏览器的标准垃圾回收算法。
在标记清除算法中，一个变量是否被需要的判断标准，是它是否可抵达 。
这个算法有两个阶段，分别是标记阶段和清除阶段：
标记阶段：垃圾收集器会先找到根对象，在浏览器里，根对象是 Window；在 Node 里，根对象是 Global。
从根对象出发，垃圾收集器会扫描所有可以通过根对象触及的变量，这些对象会被标记为 “可抵达”。
清除阶段： 没有被标记为 “可抵达” 的变量，就会被认为是不需要的变量，这波变量会被清除